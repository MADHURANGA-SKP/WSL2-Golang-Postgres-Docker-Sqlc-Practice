// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tasks.sql

package db

import (
	"context"
	"database/sql"
)

const createtasks = `-- name: Createtasks :one
INSERT INTO tasks(
    taskid,
    taskname,
    tasktime,
    taskdate
) VALUES (
    $1, $2, $3, $4
)
RETURNING taskid, taskname, tasktime, taskdate
`

type CreatetasksParams struct {
	Taskid   int32          `json:"taskid"`
	Taskname sql.NullString `json:"taskname"`
	Tasktime sql.NullString `json:"tasktime"`
	Taskdate sql.NullString `json:"taskdate"`
}

func (q *Queries) Createtasks(ctx context.Context, arg CreatetasksParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createtasks,
		arg.Taskid,
		arg.Taskname,
		arg.Tasktime,
		arg.Taskdate,
	)
	var i Task
	err := row.Scan(
		&i.Taskid,
		&i.Taskname,
		&i.Tasktime,
		&i.Taskdate,
	)
	return i, err
}

const deletetasks = `-- name: Deletetasks :exec
DELETE FROM tasks 
WHERE taskid = $1
`

func (q *Queries) Deletetasks(ctx context.Context, taskid int32) error {
	_, err := q.db.ExecContext(ctx, deletetasks, taskid)
	return err
}

const gettasks = `-- name: Gettasks :one
SELECT taskid, taskname, tasktime, taskdate FROM tasks
WHERE taskid = $1 LIMIT 1
`

func (q *Queries) Gettasks(ctx context.Context, taskid int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, gettasks, taskid)
	var i Task
	err := row.Scan(
		&i.Taskid,
		&i.Taskname,
		&i.Tasktime,
		&i.Taskdate,
	)
	return i, err
}

const listtasks = `-- name: Listtasks :many
SELECT taskid, taskname, tasktime, taskdate FROM tasks
ORDER BY taskid
LIMIT 1
`

func (q *Queries) Listtasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listtasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.Taskid,
			&i.Taskname,
			&i.Tasktime,
			&i.Taskdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatetasks = `-- name: Updatetasks :one
UPDATE tasks SET taskid = $2, taskname = $3, tasktime =$4, taskdate = $5
WHERE taskid = $1
RETURNING taskid, taskname, tasktime, taskdate
`

type UpdatetasksParams struct {
	Taskid   int32          `json:"taskid"`
	Taskid_2 int32          `json:"taskid_2"`
	Taskname sql.NullString `json:"taskname"`
	Tasktime sql.NullString `json:"tasktime"`
	Taskdate sql.NullString `json:"taskdate"`
}

func (q *Queries) Updatetasks(ctx context.Context, arg UpdatetasksParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updatetasks,
		arg.Taskid,
		arg.Taskid_2,
		arg.Taskname,
		arg.Tasktime,
		arg.Taskdate,
	)
	var i Task
	err := row.Scan(
		&i.Taskid,
		&i.Taskname,
		&i.Tasktime,
		&i.Taskdate,
	)
	return i, err
}
